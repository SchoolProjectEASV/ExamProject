version: '3.7'

services:
  gatewayservice:
    image: gatewayservice
    build:
      context: .
      dockerfile: ./packages/OcelotGateway/Dockerfile
    ports:
      - "8082:8080"

  productdb:
    image: 'mongo:latest'
    container_name: product_mongodb
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongodb_data:/data/db

  categorydb:
    image: 'mongo:latest'
    container_name: category_mongodb
    restart: always
    ports:
      - '27018:27017'
    volumes:
      - categorydb_data:/data/db

  productservice:
    image: productservice
    build:
      context: .
      dockerfile: ./projects/Product/ProductService/Dockerfile
    ports:
      - "8080:8080"
      - "8443:443"
    depends_on:
      - productdb
      - gatewayservice

  orderservice:
    image: orderservice
    build:
      context: .
      dockerfile: ./projects/Order/OrderService/Dockerfile
    ports:
      - "8091:8080"
    depends_on:
      - orderdb
      - gatewayservice

  categoryservice:
    image: categoryservice
    build:
      context: .
      dockerfile: ./projects/Category/CategoryService/Dockerfile
    ports:
      - "8090:8080"
      - "8444:443"
    depends_on:
      - categorydb
      - gatewayservice

  zipkin:
    image: openzipkin/zipkin:latest
    ports:
      - "9411:9411"
    restart: unless-stopped

  seq:
    image: datalust/seq:latest
    ports:
      - "5342:80"
      - "5341:5341"
    volumes:
      - seq_data:/data
    environment:
      ACCEPT_EULA: "Y"

  vault:
    image: hashicorp/vault
    healthcheck:
      retries: 5
    restart: always
    ports:
      - 8200:8200
    environment:
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_LOCAL_CONFIG: '{"listener": [{"tcp": {"address": "0.0.0.0:8200","tls_disable": "1"}}],"ui": true,"storage": {"file": {"path": "/vault/data"}},"rate_limit": {"default": {"rate": 500,"burst": 1000},"path_rate_limiter": {"/v1/secret/data/*": {"rate": 1000,"burst": 2000},"/v1/sys/*": {"rate": 100,"burst": 200}}},"audit": {"file": {"file_path": "/vault/logs/audit.log"}}}'
    cap_add:
      - IPC_LOCK
    volumes:
      - ./vault/config:/vault/config
      - ./vault/data:/vault/data
      - ./vault/logs:/vault/logs
    command: vault server -config=/vault/config/local.json

  orderdb:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: SuperSecret7!
      POSTGRES_DB: Order_db
    ports:
      - "5433:5432"
    volumes:
      - orderdb_data:/var/lib/postgresql/data

  userdb:
    image: postgres
    restart: always
    environment:
      POSTGRES_PASSWORD: example
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data

  userservice:
    image: userservice
    build:
      context: .
      dockerfile: ./projects/User/UserService/Dockerfile
    ports:
      - "8070:8080"
      - "8445:443"
    depends_on:
      - userdb
      - gatewayservice

  redis:
    image: 'redislabs/redisearch:latest'
    container_name: 'redis'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - '6379:6379'

  authdb:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: Auth_db
    ports:
      - "5434:5432"
    volumes:
      - authdb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  authservice:
    image: authservice
    build:
      context: .
      dockerfile: ./projects/Auth/AuthService/Dockerfile
    ports:
      - "8081:8080"
      - "8446:443"
    depends_on:
      - authdb
      - gatewayservice

        


volumes:
  mongodb_data: {}
  categorydb_data: {}
  seq_data: {}
  postgres-data: {}
  orderdb_data: {}
  vault_data: {}
  vault_logs: {}
  authdb_data: {}
